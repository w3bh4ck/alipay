'use strict';
var Promise1 = require('./core');
var DEFAULT_WHITELIST = [
    ReferenceError,
    TypeError,
    RangeError
];
var enabled = false;
exports.disable = disable;
function disable() {
    enabled = false;
    Promise1._Y = null;
    Promise1._Z = null;
}
exports.enable = enable;
function enable(options) {
    options = options || {
    };
    if (enabled) disable();
    enabled = true;
    var id = 0;
    var displayId = 0;
    var rejections = {
    };
    Promise1._Y = function(promise) {
        if (promise._V === 2 && rejections[promise._1]) {
            if (rejections[promise._1].logged) onHandled(promise._1);
            else clearTimeout(rejections[promise._1].timeout);
            delete rejections[promise._1];
        }
    };
    Promise1._Z = function(promise, err) {
        if (promise._U === 0) {
            promise._1 = id++;
            rejections[promise._1] = {
                displayId: null,
                error: err,
                timeout: setTimeout(onUnhandled.bind(null, promise._1), // For reference errors and type errors, this almost always
                // means the programmer made a mistake, so log them after just
                // 100ms
                // otherwise, wait 2 seconds to see if they get handled
                matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
                logged: false
            };
        }
    };
    function onUnhandled(id1) {
        if (options.allRejections || matchWhitelist(rejections[id1].error, options.whitelist || DEFAULT_WHITELIST)) {
            rejections[id1].displayId = displayId++;
            if (options.onUnhandled) {
                rejections[id1].logged = true;
                options.onUnhandled(rejections[id1].displayId, rejections[id1].error);
            } else {
                rejections[id1].logged = true;
                logError(rejections[id1].displayId, rejections[id1].error);
            }
        }
    }
    function onHandled(id1) {
        if (rejections[id1].logged) {
            if (options.onHandled) options.onHandled(rejections[id1].displayId, rejections[id1].error);
            else if (!rejections[id1].onUnhandled) {
                console.warn('Promise Rejection Handled (id: ' + rejections[id1].displayId + '):');
                console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id1].displayId + '.');
            }
        }
    }
}
function logError(id, error) {
    console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
    var errStr = (error && (error.stack || error)) + '';
    errStr.split('\n').forEach(function(line) {
        console.warn('  ' + line);
    });
}
function matchWhitelist(error, list) {
    return list.some(function(cls) {
        return error instanceof cls;
    });
}
